sc-evm {

  # Base directory where all the data used by the node is stored, including blockchain data and private keys
  // datadir = ${user.home}"/.sc-evm/"${sc-evm.blockchain.network}
  // local fix
  datadir = ${HOME}"/.scevm/"${sc-evm.blockchain.network}
  datadir = ${?SC_EVM_DATADIR}

  db {
    rocksdb {
      # RocksDB data directory
      path = ${sc-evm.datadir}"/rocksdb/"

      # Create DB data directory if it's missing
      create-if-missing = true

      # Should the DB raise an error as soon as it detects an internal corruption
      paranoid-checks = true

      # This ensures that only one thread will be occupied
      max-threads = 1

      # This ensures that only 32 open files can be accessed at once
      max-open-files = 32

      # Force checksum verification of all data that is read from the file system on behalf of a particular read
      verify-checksums = true

      # In this mode, size target of levels are changed dynamically based on size of the last level
      # https://rocksdb.org/blog/2015/07/23/dynamic-level.html
      level-compaction-dynamic-level-bytes = true

      # Approximate size of user data packed per block (16 * 1024)
      block-size = 16384

      # Amount of cache in bytes that will be used by RocksDB (32 * 1024 * 1024)
      block-cache-size = 33554432
    }

    # Define which database to use [rocksdb | memory]
    data-source = "rocksdb"
  }

  filter {
    # Maximum number of blocks to fetch when executing a filter (like in eth_getLogs)
    filter-max-block-to-fetch = 100
  }

  vm {
    # internal | kevm | iele | test-mode
    vm-type = "internal"

    kevm = { host = "0.0.0.0", port = 8888, proto-api-version = "2.2" }
    iele = { host = "0.0.0.0", port = 8888, proto-api-version = "3.0" }

    # Start the default internal EVM in a separate thread and use it as an external VM.
    # Can be used for testing purposes and troubleshooting.
    test-mode = { host = "0.0.0.0", port = 8888 }
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  # Not using ${logging.logs-level} because it might be set to TRACE, which our version of Akka doesn't have.
  loglevel = "INFO"
  loglevel = ${?SC_EVM_AKKA_LOGLEVEL}
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s
  log-dead-letters-during-shutdown = off
  log-dead-letters = 5

  coordinated-shutdown.phases {
    actor-system-terminate {
      timeout = 15 s
    }
  }
}

include "metrics.conf"

# Bounded mailbox configured for SignedTransactionsFilterActor.
# Actor is resposible for calculating sender for signed transaction which is heavy operation, and when there are many
# peers it can easily overflow
bounded-mailbox {
  mailbox-type = "akka.dispatch.NonBlockingBoundedMailbox"
  mailbox-capacity = 50000
}

akka.actor.mailbox.requirements {
  "akka.dispatch.BoundedMessageQueueSemantics" = bounded-mailbox
}

logging {
  # Flag used to switch logs to the JSON format
  json-output = false

  # Logs directory
  logs-dir = ${sc-evm.datadir}"/logs"

  # Logs filename
  logs-file = "scevm"

  # Logs level
  logs-level = "INFO"
  logs-level = ${?SC_EVM_LOGLEVEL}

  # Flag used to switch between FileAppender and RollingFileAppender
  roll-files = true

  log-to-file = true
}
