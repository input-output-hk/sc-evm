include required(classpath("conf/base.conf"))

sc-evm {

  db {
    data-source = "memory"
  }

  blockchain {
    network = "test"

    include required("chains/test-chain.conf")
  }

  network {
    bootstrap-nodes = []
    rpc {
      http.enabled = true
    }
  }

  pos {
    private-keys = [
      {leader: "f46bf49093d585f2ea781a0bf6d83468919f547999ad91c9210256979d88eef2", cross-chain: "f46bf49093d585f2ea781a0bf6d83468919f547999ad91c9210256979d88eef2"},
      {leader: "8aa5dcb7d690fca1f5117f8aab74c9b166206d885e669035fdf9d977286f420d", cross-chain: "8aa5dcb7d690fca1f5117f8aab74c9b166206d885e669035fdf9d977286f420d"},
      {leader: "96a05082b44719f5b4a9c25a33b48c09e4dded88a3c3d307cc394de780eb0dd4", cross-chain: "96a05082b44719f5b4a9c25a33b48c09e4dded88a3c3d307cc394de780eb0dd4"},
      {leader: "8d4908ef6ffa98c1be9f84ac36c35ee6c89bf4584c238f3c6988a308d71c8cba", cross-chain: "8d4908ef6ffa98c1be9f84ac36c35ee6c89bf4584c238f3c6988a308d71c8cba"},
      {leader: "6f242bad39e67a0593a7ef1f863d6d1e9810f5aa391399549eb151ea25d02cca", cross-chain: "6f242bad39e67a0593a7ef1f863d6d1e9810f5aa391399549eb151ea25d02cca"},
      {leader: "b08d768068599227034696d351ed1881e047a7edcf1be0e791cfa1cdf82f20a8", cross-chain: "b08d768068599227034696d351ed1881e047a7edcf1be0e791cfa1cdf82f20a8"},
    ]
  }

  sidechain {
    signing.private-key = "f46bf49093d585f2ea781a0bf6d83468919f547999ad91c9210256979d88eef2"
    datasource {
      type = "mock"

      bridge-client = {
        # feature flag for using bridge client
        enabled = false

        socket-path = "/local/bridge.socket"
      }
    }

    election-cache {
      valid-ttl {
        initial = 2 minutes
        refresh = 2 minutes
      }
      invalid-ttl {
        initial = 10 seconds
        refresh = 0 minutes
      }
      max-size = 100
    }

    observability {
      # Waiting period between two checks on the db-sync (to see if it is up-to-date)
      waiting-period = 1 minute

      # Constant used to define (roughly) the number of blocks that must be missing from cardano-follower to trigger warning logs.
      # Note that a block is expected to be produced once every `slot-duration-seconds / active-slot-coeff` slots.
      # This means that warning logs will be triggered
      # if there are no new block in cardano-follower for the last `slot-duration-seconds / active-slot-coeff * warning-threshold` slots
      slot-lag-warning-threshold-in-blocks = 8

      # Constant used to define the number of committee handovers that must be missing from cardano-follower to trigger warning logs.
      # Note that the current committee will be missing majority of time because it can be submitted on chain only at the end of the current epoch.
      handover-lag-warning-threshold = 3
    }
  }

  sync {
    start-sync = false
  }

  test-node {
    # If true, this will activate the hardhat interface for SC EVM:
    #  - The test node will not wait an explicit request to create a new block.
    #    Instead it will create a new block on every transaction submitted
    #  - The web3_clientVersion endpoint will return 'hardhatnetwork-sc-evm-interface'
    #  - Some additionnal hardhat specific endpoints will be exposed (currently only setStorage)
    hardhat-mode = false
  }

}

akka.http.server.request-timeout = 30.seconds
