syntax = "proto3";
package io.iohk.extvm.kevm;

message Hello {
  string version = 1;
  EthereumConfig ethereumConfig = 2;
}

message CallContext {
  bytes callerAddr = 1;
  // empty if contract creation
  bytes recipientAddr = 2;
  bytes inputData = 3;
  bytes callValue = 4;
  bytes gasPrice = 5;
  bytes gasProvided = 6;
  BlockHeader blockHeader = 7;

  EthereumConfig ethereumConfig = 8;

  // Support for typed transactions specified by EIP-2718
  enum TxType {
    LEGACY     = 0;
    ACCESSLIST = 1;
  }
  TxType txType = 10;
  oneof extraData {
    AccessListData accessList = 11;
  }
}

message AccessListData {
  repeated bytes addresses = 1;
  repeated StorageEntry storageLocations = 2;
}

message StorageEntry {
  bytes address = 1;
  bytes storageLocation = 2;
}

message BlockHeader {
  bytes beneficiary = 1;
  bytes difficulty = 2;
  bytes number = 3;
  bytes gasLimit = 4;
  int64 unixTimestamp = 5;
}

message EthereumConfig {
  bytes frontierBlockNumber = 1;
  bytes homesteadBlockNumber = 2;
  bytes eip150BlockNumber = 3;
  bytes eip160BlockNumber = 4;
  bytes eip161BlockNumber = 5;
  bytes byzantiumBlockNumber = 6;
  bytes constantinopleBlockNumber = 7;
  bytes petersburgBlockNumber = 8;
  bytes istanbulBlockNumber = 9;
  bytes berlinBlockNumber = 10;
  bytes maxCodeSize = 11;
  bytes accountStartNonce = 12;
  bytes chainId = 13;
}

message GetAccount {
  bytes address = 1;
}

message Account {
  // if account does not exist, nonce and balance will be empty
  // if account exists but is empty, nonce and balance will be equivalent to numeric zeroes
  bytes nonce = 1;
  bytes balance = 2;
  bool codeEmpty = 3;
}

message GetStorageData {
  bytes address = 1;
  bytes offset = 2;
}

message StorageData {
  bytes data = 1;
}

message GetCode {
  bytes address = 1;
}

message Code {
  bytes code = 1;
}

message GetBlockhash {
  int32 offset = 1;
}

message Blockhash {
  bytes hash = 1;
}

message CallResult {
  bytes returnData = 1;
  // required for IELE VM
  bytes returnCode = 2;
  bytes gasRemaining = 3;
  bytes gasRefund = 4;
  bool error = 5;
  repeated ModifiedAccount modifiedAccounts = 6;
  repeated bytes deletedAccounts = 7;
  // touchedAccounts is specific Ethereum's EIP-161. VMs that do not follow these rules may ignore this field
  repeated bytes touchedAccounts = 8;
  repeated LogEntry logs = 9;
  AccessListData accessList = 10;
}

message ModifiedAccount {
  bytes address = 1;
  bytes nonce = 2;
  bytes balance = 3;
  repeated StorageUpdate storageUpdates = 4;
  // empty value indicates that no code has been assigned to this account
  bytes code = 5;
}

message StorageUpdate {
  bytes offset = 1;
  bytes data = 2;
}

message LogEntry {
  bytes address = 1;
  repeated bytes topics = 2;
  bytes data = 3;
}

message VMQuery {
  oneof query {
    GetAccount getAccount = 1;
    GetStorageData getStorageData = 2;
    GetCode getCode = 3;
    GetBlockhash getBlockhash = 4;
    CallResult callResult = 5;
  }
}