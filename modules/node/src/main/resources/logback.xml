<configuration>

    <property name="stdoutEncoderPattern" value="%d [%logger{36}] %-5level %replace([%mdc] ){'\\[\\] $', ''}- %msg%n" />
    <property name="fileEncoderPattern" value="%d [%thread] %-5level %logger{36} %X{akkaSource} %replace([%mdc] ){'\\[\\] $', ''}- %msg%n" />

    <!--read properties from application.conf-->
    <newRule pattern="*/load" actionClass="io.iohk.scevm.utils.LoadFromApplicationConfiguration"/>
    <load key="logging.json-output" as="ASJSON"/>
    <load key="logging.logs-dir" as="LOGSDIR"/>
    <load key="logging.logs-file" as="LOGSFILENAME"/>
    <load key="logging.logs-level" as="LOGSLEVEL"/>
    <load key="logging.roll-files" as="ROLLFILES"/>
    <load key="logging.log-to-file" as="LOGTOFILE"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${stdoutEncoderPattern}</pattern>
        </encoder>
    </appender>

    <appender name="STASH" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <customFields>{"hostname":"${HOSTNAME}"}</customFields>
            <fieldNames>
                <timestamp>timestamp</timestamp>
                <version>[ignore]</version>
            </fieldNames>
        </encoder>
    </appender>
    <if condition='p("LOGTOFILE").contains("true")'>
        <then>
            <if condition='p("ROLLFILES").contains("true")'>
              <then>
                <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                    <file>${LOGSDIR}/${LOGSFILENAME}.log</file>
                    <append>true</append>
                    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
                        <fileNamePattern>${LOGSDIR}/${LOGSFILENAME}.%i.log.zip</fileNamePattern>
                        <minIndex>1</minIndex>
                        <maxIndex>10</maxIndex>
                    </rollingPolicy>
                    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                        <maxFileSize>10MB</maxFileSize>
                    </triggeringPolicy>
                    <encoder>
                        <pattern>${fileEncoderPattern}</pattern>
                    </encoder>
                </appender>
              </then>
              <else>
                <appender name="FILE" class="ch.qos.logback.core.FileAppender">
                  <file>${LOGSDIR}/${LOGSFILENAME}.log</file>
                  <append>true</append>
                  <encoder>
                    <pattern>${fileEncoderPattern}</pattern>
                  </encoder>
                </appender>
              </else>
            </if>
        </then>
    </if>

    <appender name="METRICS" class="io.prometheus.client.logback.InstrumentedAppender" />

    <root level="${LOGSLEVEL}">
        <if condition='p("ASJSON").contains("true")'>
            <then>
                <appender-ref ref="STASH" />
            </then>
            <else>
                <appender-ref ref="STDOUT" />
            </else>
        </if>
        <if condition='p("LOGTOFILE").contains("true")'>
            <then>
                <appender-ref ref="FILE" />
            </then>
        </if>
        <appender-ref ref="METRICS" />
    </root>

    <logger name="io.netty" level="WARN"/>
    <logger name="io.netty.bootstrap" level="ERROR"/>
    <logger name="io.iohk.scalanet" level="INFO" />
    <logger name="io.iohk.scevm.network.PeerActor" level="${LOGSLEVEL}" />
    <logger name="io.iohk.scevm.network.rlpx.RLPxConnectionHandler" level="${LOGSLEVEL}" />
    <logger name="org.jupnp.QueueingThreadPoolExecutor" level="WARN" />
    <logger name="org.jupnp.util.SpecificationViolationReporter" level="ERROR" />
    <logger name="org.jupnp.protocol.RetrieveRemoteDescriptors" level="ERROR" />
    <logger name="HighDensityResolver" level="DEBUG" />
    <logger name="LowDensityResolver" level="DEBUG" />
</configuration>
