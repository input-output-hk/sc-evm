sc-evm {
  # Optionally augment the client ID sent in Hello messages.
  # Type: String
  client-identity = null

  # Base directory where all the data used by the node is stored, including blockchain data and private keys
  # Type: Filesystem Path String
  datadir = ${user.home}"/.sc-evm/"${sc-evm.blockchain.network}
  datadir = ${?SC_EVM_DATADIR}

  # The unencrypted private key of this node
  # Type: Filesystem Path String
  node-key-file = ${sc-evm.datadir}"/node.key"

  keyStore {
    # Keystore directory: stores encrypted private keys of accounts managed by this node
    # Type: Filesystem Path String
    keystore-dir = ${sc-evm.datadir}"/keystore"

    # Enforces minimal length for passphrase of this keystore
    # Type: NonNegative Integer
    minimal-passphrase-length = 7

    # Allows possibility for no passphrase
    # If passphrase is set it must be greater than minimal-passphrase-length
    # Type: Boolean
    allow-no-passphrase = true
  }

  # Configuration that must be used if the node has to be the faucet
  # faucet {
  #   private-key = ${?SC_EVM_FAUCET_PRIVATE_KEY}
  #
  #   # Transaction gas price
  #   tx-gas-price = 20000000000
  #
  #   # Transaction gas limit
  #   tx-gas-limit = 90000
  #
  #   # Transaction value
  #   tx-value = 1000000000000000000
  # }

  network {
    # Set of initial nodes
    # Type: Set of Uniform Resource Identifiers (URI)
    bootstrap-nodes = null

    server-address {
      # Listening interface for Ethereum protocol connections
      # Type: Internet Protocol (IP) Address String
      interface = "0.0.0.0"

      # Listening port for Ethereum protocol connections
      # Type: NonNegative Integer
      port = 9076
      port = ${?SC_EVM_P2P_PORT}
    }

    peer {
      # Retry delay for failed attempt at connecting to a peer
      # Type: Finite Duration
      connect-retry-delay = 5 seconds

      # Maximum number of reconnect attempts after the connection has been initiated.
      # After that, the connection will be dropped until its initiated again.
      # Type: NonNegativeInteger
      connect-max-retries = 1

      # Time between scheduling and sending poison pill message to the Peer Actor
      # Type: Finite Duration
      disconnect-poison-pill-timeout = 5 seconds

      # Maximum time to wait for the Hello message response in Peer Actor handshake process
      # Type: Finite Duration
      wait-for-hello-timeout = 3 seconds

      # Maximum time to wait for the Status message response in Peer Actor handshake process
      # Type: Finite Duration
      wait-for-status-timeout = 30 seconds

      # Maximum time to wait for RLPX connection auth handshake process to finish
      # This handshake process happens before Peer Actor handshake
      # Type: Finite Duration
      wait-for-handshake-timeout = 15 seconds

      # Maximum time to wait for ACK from the peer for all sent messages
      # Type: Finite Duration
      wait-for-tcp-ack-timeout = 5 seconds

      # Maximum block headers in a single response message (as a blockchain host)
      # Type: Positive Integer
      max-blocks-headers-per-message = 100

      # Maximum block bodies in a single response message (as a blockchain host)
      # Type: Positive Integer
      max-blocks-bodies-per-message = 100

      # Maximum blocks for transactions receipts in a single response message (as a blockchain host)
      # Type: Positive Integer
      max-blocks-per-receipts-message = 1000

      # Maximum blocks in a FullBlocks response message (as a blockchain host)
      # Type: Positive Integer
      max-blocks-per-full-blocks-message = 1000

      # Maximum stable headers in a single response message (as a blockchain host)
      # Type: Positive Integer
      max-stable-headers-per-message = 100

      # Maximum MPT components in a single response message (as a blockchain host)
      # Type: Positive Integer
      max-mpt-components-per-message = 2000

      # How many incoming messages to handle in parallel
      # Type: Positive Integer
      blockchain-host-parallelism = 10

      # Minimum number of peers this node tries to connect to at all times
      min-outgoing-peers = 20

      # Maximum number of peers this node can connect to at any time.
      # It's a bit higher than max-incoming-peers so that the node can quickly churn through incompatible peers after startup.
      # Type: Positive Integer
      max-outgoing-peers = 50

      # Maximum number of peers that can connect to this node.
      # Should be at least as much as `min-outgoing-peers` so on a network level `total(max-in) >= total(min-out)`
      # Type: Positive Integer
      max-incoming-peers = 30

      # Number of incoming peers to prune if we hit the maximum, to free up slots for new connections.
      # Type: NonNegative Integer
      prune-incoming-peers = 10

      # Minimum age of peers before they can be selected for pruning, and the minimum time to pass between pruning attempts.
      # Type: Finite Duration
      min-prune-age = 30.minutes

      # Maximum number of peers that can be connecting to this node
      # Type: Positive Integer
      max-pending-peers = 20

      # Initial delay before connecting to nodes
      # Type: Finite Duration
      update-nodes-initial-delay = 0.seconds

      # Newly discovered nodes connect attempt interval
      # Type: Finite Duration
      update-nodes-interval = 30.seconds

      # Resolution of moving window of peer statistics.
      # Will be multiplied by `stat-slot-count` to give the overall length of peer statistics availability.
      # Type: Finite Duration
      stat-slot-duration = 10.minutes

      # How many slots of peer statistics to keep in the moving window, e.g. 60 * 1.minute to keep stats for the last hour with 1 minute resolution.
      # Type: Positive Integer
      stat-slot-count = 72
    }

    rpc {
      http {
        # Whether to enable JSON-RPC HTTP endpoint
        # Type: Boolean
        enabled = true

        # Listening address of JSON-RPC HTTP endpoint
        # Type: Internet Protocol (IP) Address String
        interface = "localhost"

        # Listening port of JSON-RPC HTTP endpoint
        # Type: NonNegative Integer
        port = 8546
        port = ${?SC_EVM_RPC_PORT}

        # Domains allowed to query RPC endpoint. Use "*" to enable requests from
        # any domain.
        # Type: (Set of Uniform Resource Identifiers (URI)) | (Singleton String "*")
        cors-allowed-origins = []

        # Rate Limit for JSON-RPC requests
        # Limits the amount of request the same ip can perform in a given amount of time
        rate-limit {
          # If enabled, restrictions are applied
          # Type: Boolean
          enabled = false

          # Time that should pass between requests
          # Type: Finite Duration
          min-request-interval = 10.seconds
        }

        # Amount of time before a timeout error is returned for a request
        # Type: Finite Duration
        request-timeout = 20.seconds

        # If enabled, the service discovery method will be available (https://spec.open-rpc.org/#service-discovery-method)
        # Note: Only the schema of endpoints that are migrated to Armadillo will be shown
        # Type: Boolean
        openrpc-specification-enabled = false

        # Rendering engine used to display the RPC endpoints specification in a pretty fashion
        # Type: URL String ending with "schemaUrl="
        openrpc-rendering-engine-url = "https://playground.open-rpc.org/?uiSchema[appBar][ui:splitView]=false&schemaUrl="

        # URL that corresponds to the node that can expose the service discovery method
        # Type: URL String
        openrpc-schema-url = "http://localhost:8546"
      }

      # Enabled JSON-RPC APIs over the JSON-RPC endpoint
      apis {
        eth = true
        net = true
        web3 = true
        personal = true
        faucet = false
        sidechain = false
        sanity = true
        txpool = true
        inspect = false
        scevm = true
        debug = false
      }

      # Lmits the time of EVM transaction execution through debug_traceTransaction endpoint
      # The endpoint re-executes a transaction that was already present in a block
      # Type: Finite Duration
      trace-transaction.default-timeout = 5.seconds
    }
  }

  pos {

    # Private key (32 bytes long) used to sign block when leading
    # Type: Hex String
    private-keys = [
      {
        leader: ${?LEADER_PRIVATE_KEY}
        cross-chain: ${?LEADER_PRIVATE_KEY}
      }
    ]

    # The number of rounds a transaction is kept in the mempool before it is evicted
    # Type: Positive Integer
    transaction-ttl-rounds-u = 100
    # Maximum size of transaction mempool
    # After it is reached, no new transactions are added
    # Type: Positive Integer
    transaction-pool-size = 4096

    metrics {
      # Define the maximum amount of time that a BlockHash can be tracked by TimeToFinalizationTracker before being untracked
      # Type: Finite Duration
      time-to-finalization-tracker-timeout = 5.minutes
    }
  }

  # The blockchain section should contain the chain specific data.
  # By definition there is no sensible default for the values in here but
  # one can use local-standalone/chain.conf as an example.
  #
  # For instance:
  # ```
  # blockchain {
  #
  #   # name of the network
  #   # Type: String
  #   network = "scevm-devnet"
  #   # configuration for the chain
  #   include required("local-standalone/chain.conf")
  #
  # }
  # ```

  sync {

    # Tells whether the node should run sync on startup
    # Type: Boolean
    start-sync = true
    start-sync = ${?START_SYNC}

    # Type: String
    # Possible values:
    #   "full": download and execute every block in the blockchain up to the current network stable
    #   "fast": download every block but skip the execution, download the entire state at the current network stable
    sync-mode = "fast"
    sync-mode = ${?SYNC_MODE}

    # Response time-out from peer during sync. If a peer fails to respond within this limit, it will be disconnected.
    # Type: Finite Duration
    peer-response-timeout = 30.seconds

    # Max buffer size for block processing flow.
    # Type: NonNegative Integer
    message-source-buffer = 256

    # Offset for the "reasonable" ancestor used for scoring the stable branch of the peer.
    # Must be multiple times larger than the committee size
    # Type: Positive Integer
    scoring-ancestor-offset = ${sc-evm.blockchain.stability-parameter-k}

    # Value which will be multiplied by "stability-parameter-k" to define the cache of the gossiping protocol
    # Type: Positive Double
    gossip-cache-factor = 2.0

    # Retry count when resolving the network stable header
    # Type: NonNegative Integer
    network-stable-header-resolver-retry-count = 20

    # Retry delay when resolving the network stable header
    # Type: Finite Duration
    network-stable-header-resolver-retry-delay = 30.seconds

    # Enable low density fallback for stable branch sync
    # Type: Boolean
    enable-low-density-sync-fallback = true

    # Minimum chain density to take into account in low-density-sync mode
    # Type: Double
    network-stable-header-resolver-low-density-threshold = 0.1

    # Max number of headers stored in memory for long branch synchronization
    # Type: Positive Integer
    max-headers-in-memory-count = 10000
  }

  branchFetcher {
    # Max number of blocks to ask at once
    # Type: Positive Integer
    max-blocks-per-message = 1000

    # Timeout delay before failing operation
    # Type: Finite Duration
    request-timeout = 10.seconds

    # Subscription queue size to handle responses. Low value can block other consumers.
    # Type: Positive Integer
    subscription-queue-size = 10
  }

  db {
    rocksdb {
      # RocksDB data directory
      # Type: Filesystem Path String
      path = ${sc-evm.datadir}"/rocksdb/"

      # Create DB data directory if it's missing
      # Type: Boolean
      create-if-missing = true

      # Should the DB raise an error as soon as it detects an internal corruption
      # Type: Boolean
      paranoid-checks = true

      # This ensures that only one thread will be occupied
      # Type: Positive Integer
      max-threads = 1

      # This ensures that only 32 open files can be accessed at once
      # Type: Positive Integer
      max-open-files = 32

      # Force checksum verification of all data that is read from the file system on behalf of a particular read
      # Type: Boolean
      verify-checksums = true

      # In this mode, size target of levels are changed dynamically based on size of the last level
      # https://rocksdb.org/blog/2015/07/23/dynamic-level.html
      # Type: Boolean
      level-compaction-dynamic-level-bytes = true

      # Approximate size of user data packed per block (16 * 1024)
      # Type: Positive Integer
      block-size = 16384

      # Amount of cache in bytes that will be used by RocksDB (32 * 1024 * 1024)
      # Type: Positive Integer
      block-cache-size = 33554432

      # folder where the rocksdb backup will be put. For best performence is should be on the same filesystem.
      backup-dir = ${sc-evm.datadir}"/backup/"
    }

    # Define which database to use
    # Type: String
    # Possible values: "rocksdb", "memory"
    data-source = "rocksdb"
  }

  filter {
    # Maximum number of blocks to fetch when executing a filter (like in eth_getLogs)
    # Type: Positive Integer
    filter-max-block-to-fetch = 100
  }

  # Ethereum Virtual Machine
  vm {
    # Type: String
    # Possible values: internal, kevm, iele, test-mode
    vm-type = "internal"

    kevm = {host = "0.0.0.0", port = 8888, proto-api-version = "2.2"}
    iele = {host = "0.0.0.0", port = 8888, proto-api-version = "3.0"}

    # Start the default internal EVM in a separate thread and use it as an external VM.
    # Can be used for testing purposes and troubleshooting.
    test-mode = {host = "0.0.0.0", port = 8888}
  }

  sidechain {
    # DataSource which stores mainchain state
    datasource {
      # Type: String
      # Possible values: db-sync, other might be added later on
      type = "db-sync"

      # Db sync postgress database configuration for db-sync datasource
      db-sync {
        # Type: String
        username = "postgres"
        username = ${?DB_SYNC_USERNAME}
        # Type: String
        password = "postgres"
        password = ${?DB_SYNC_PASSWORD}
        # Type: String
        name = "cexplorer"
        name = ${?DB_SYNC_DB_NAME}
        # Type: Internet Protocol (IP) Address String
        host = "localhost"
        host = ${?DB_SYNC_HOST}
        # Type: NonNegative Integer
        port = 5432
        port = ${?DB_SYNC_PORT}

        # Type: ClassName String
        driver = "org.postgresql.Driver"
        driver = ${?DB_SYNC_DRIVER}

        # Type: Positive Integer
        connect-thread-pool-size = 8
        connect-thread-pool-size = ${?DB_SYNC_POOL_SIZE}
      }
    }

    # Key-Value Cache of Valid Epoch Data
    # Valid Epoch Data consists of a set of Valid Leader Candidates public keys and stake delegations
    election-cache {
      # TTL for key:value pairs where value is defined
      valid-ttl {
        # TTL after writing
        # Type: Finite Duration
        initial = 2 minutes
        # TTL after reading
        # Type: Finite Duration
        refresh = 2 minutes
      }
      # TTL for key:value pairs where value is empty
      invalid-ttl {
        # TTL after writing
        # Type: Finite Duration
        initial = 10 seconds
        # TTL after reading
        # Type: Finite Duration
        refresh = 0 minutes
      }

      # Cache max size
      # Type: NonNegative Integer
      max-size = 100
    }

    observability {
      # Waiting period between two checks on the db-sync (to see if it is up-to-date)
      # Type: Finite Duration
      waiting-period = 1 minute

      # Constant used to define (roughly) the number of blocks that must be missing from cardano-follower to trigger warning logs.
      # Note that a block is expected to be produced once every `slot-duration-seconds / active-slot-coeff` slots.
      # This means that warning logs will be triggered
      # if there are no new block in cardano-follower for the last `slot-duration-seconds / active-slot-coeff * warning-threshold` slots
      # Type: Positive Integer
      slot-lag-warning-threshold-in-blocks = 8

      # Constant used to define the number of committee handovers that must be missing from cardano-follower to trigger warning logs.
      # Note that the current committee will be missing majority of time because it can be submitted on chain only at the end of the current epoch.
      # Type: Positive Integer
      handover-lag-warning-threshold = 3
    }
  }
}

# Akka configuration, for more info check https://doc.akka.io/docs/akka/current/general/configuration-reference.html
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  # Not using ${logging.logs-level} because it might be set to TRACE, which our version of Akka doesn't have.
  loglevel = "INFO"
  loglevel = ${?SC_EVM_AKKA_LOGLEVEL}
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s
  log-dead-letters-during-shutdown = off
  log-dead-letters = 5

  coordinated-shutdown.phases {
    actor-system-terminate {
      timeout = 15 s
    }
  }
}

include "metrics.conf"

# Bounded mailbox configured for SignedTransactionsFilterActor.
# Actor is resposible for calculating sender for signed transaction which is heavy operation, and when there are many
# peers it can easily overflow
bounded-mailbox {
  mailbox-type = "akka.dispatch.NonBlockingBoundedMailbox"
  mailbox-capacity = 50000
}

akka.actor.mailbox.requirements {
  "akka.dispatch.BoundedMessageQueueSemantics" = bounded-mailbox
}

logging {
  # Flag used to switch logs to the JSON format
  # Type: Boolean
  json-output = false

  # Logs directory
  # Type: Filesystem Path String
  logs-dir = ${sc-evm.datadir}"/logs"

  # Logs filename
  # Type: String
  logs-file = "scevm"

  # Logs level
  # Type: String
  # Possible values: TRACE, DEBUG, INFO, WARN, ERROR
  logs-level = "INFO"
  logs-level = ${?SC_EVM_LOGLEVEL}

  # Flag used to switch between FileAppender and RollingFileAppender
  # Type: Boolean
  roll-files = true

  # Flag which can be used to turn off file logging
  # Type: Boolean
  log-to-file = true
}
